# Generated by Django 5.0.7 on 2025-05-06 22:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], default='patient', max_length=10)),
                ('email', models.EmailField(help_text='Required. Used for login.', max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state_province', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DoctorPatientConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending_approval_by_doctor', 'Pending Approval by Doctor'), ('approved', 'Approved'), ('rejected_by_doctor', 'Rejected by Doctor'), ('terminated_by_patient', 'Terminated by Patient'), ('terminated_by_doctor', 'Terminated by Doctor')], default='pending_approval_by_doctor', max_length=50)),
                ('request_date', models.DateTimeField(auto_now_add=True, help_text='Date when patient initiated the request.')),
                ('response_date', models.DateTimeField(blank=True, help_text='Date when doctor responded to the request.', null=True)),
                ('last_interaction_date', models.DateTimeField(blank=True, help_text='Tracks the last significant interaction for this connection.', null=True)),
            ],
            options={
                'ordering': ['-request_date'],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Official name of the medication.', max_length=200, unique=True)),
                ('generic_name', models.CharField(blank=True, max_length=200, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.CharField(blank=True, help_text='e.g., Antibiotic, Analgesic, Antihypertensive', max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='General description, common uses, important warnings.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DoctorProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='doctor_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('specialization', models.CharField(blank=True, max_length=100, null=True)),
                ('medical_license_number', models.CharField(blank=True, help_text='Should be verified.', max_length=50, null=True, unique=True)),
                ('clinic_hospital_name', models.CharField(blank=True, max_length=200, null=True)),
                ('years_of_experience', models.PositiveIntegerField(blank=True, null=True)),
                ('consultation_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Set to true once credentials (e.g., license) are verified by an admin.')),
            ],
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='patient_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('blood_group', models.CharField(blank=True, help_text='e.g., A+, O-, AB+', max_length=10, null=True)),
                ('allergies', models.TextField(blank=True, help_text='List any known allergies.', null=True)),
                ('medical_conditions', models.TextField(blank=True, help_text='List any chronic or significant medical conditions.', null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateTimeField(default=django.utils.timezone.now)),
                ('symptoms', models.TextField(blank=True, help_text="Patient's reported symptoms.", null=True)),
                ('diagnosis_details', models.TextField(help_text="Doctor's detailed diagnosis.")),
                ('treatment_plan', models.TextField(blank=True, help_text='Overall treatment plan, may include lifestyle changes, etc.', null=True)),
                ('follow_up_date', models.DateField(blank=True, help_text='Recommended follow-up date.', null=True)),
                ('connection', models.ForeignKey(help_text='The doctor-patient connection this diagnosis belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='core.doctorpatientconnection')),
            ],
            options={
                'verbose_name_plural': 'Diagnoses',
                'ordering': ['-date_recorded'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_prescribed', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes_for_patient', models.TextField(blank=True, help_text='Overall notes for the patient regarding this set of medications.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this prescription currently active? (e.g., for refills or current treatment)')),
                ('diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='core.diagnosis')),
            ],
            options={
                'ordering': ['-date_prescribed'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage', models.CharField(help_text="e.g., '1 tablet', '10mg', '5ml'", max_length=100)),
                ('route', models.CharField(blank=True, help_text="e.g., 'Oral', 'Topical', 'Intravenous'", max_length=100, null=True)),
                ('frequency', models.CharField(help_text="e.g., 'Twice a day', 'Every 6 hours', 'As needed'", max_length=100)),
                ('duration_value', models.PositiveIntegerField(blank=True, help_text='Numerical value for duration (e.g., 7, 30).', null=True)),
                ('duration_unit', models.CharField(blank=True, choices=[('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months'), ('indefinite', 'Indefinite')], max_length=10, null=True)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, help_text='Automatically calculated if duration is provided, or can be set manually.', null=True)),
                ('instructions', models.TextField(blank=True, help_text="Specific instructions for this medication, e.g., 'Take with food', 'Avoid sunlight'.", null=True)),
                ('refills_allowed', models.PositiveIntegerField(default=0, help_text='Number of refills allowed.')),
                ('medication', models.ForeignKey(help_text='The specific medication being prescribed.', on_delete=django.db.models.deletion.PROTECT, to='core.medication')),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.prescription')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('notification_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notification_type', models.CharField(choices=[('medication_reminder', 'Medication Reminder'), ('appointment_reminder', 'Appointment Reminder'), ('connection_request', 'Connection Request Update'), ('new_diagnosis', 'New Diagnosis Added'), ('new_prescription', 'New Prescription Added'), ('general_update', 'General Update')], default='general_update', max_length=30)),
                ('connection_request_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.doctorpatientconnection')),
                ('diagnosis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.diagnosis')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('prescription_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.prescriptionitem')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='doctorpatientconnection',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_connections', to='core.doctorprofile'),
        ),
        migrations.AddField(
            model_name='doctorpatientconnection',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_connections', to='core.patientprofile'),
        ),
        migrations.AlterUniqueTogether(
            name='doctorpatientconnection',
            unique_together={('patient', 'doctor')},
        ),
    ]
